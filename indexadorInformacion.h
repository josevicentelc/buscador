#ifndef INDEXADORINFORMACION_H
#define INDEXADORINFORMACION_H

#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <list>

using namespace std;

class Buscador;

class InfColeccionDocs;
class InfDoc;
class InformacionPregunta;
class InformacionTermino;
class InformacionTerminoPregunta;
class InfTermDoc;



class InfColeccionDocs
{
    friend ostream& operator<<(ostream& s, const InfColeccionDocs& p);
    public:
        friend class Buscador;
        InfColeccionDocs (const InfColeccionDocs &);
        InfColeccionDocs ();
        ~InfColeccionDocs ();
        InfColeccionDocs & operator= (const InfColeccionDocs &);
        void addDoc();
        void delDoc();
        void addPal(const bool& nueva, const bool& parada);
        void decPal(const int&);
        void clear();

        long int getNumDocs() const                     {return numDocs;}
        long int getTotalPal() const                    {return numTotalPal;}
        long int getTotalPalSinParada() const           {return numTotalPalSinParada;}
        long int getTotalPalDiferentes() const          {return numTotalPalDiferentes;}
        long int getBytes() const                       {return tamBytes;};

        void setNumDocs(const int& n)                   {numDocs = n;};
        void setTotalPal(const long int& n)             {numTotalPal = n;};
        void setTotalPalSinParada(const long int& n)    {numTotalPalSinParada= n;};
        void setTotalPalDiferentes(const long int& n)   {numTotalPalDiferentes = n;};
        void setBytes(const int& n)                     {tamBytes = n;};

    protected:
   private:
        long int numDocs; // N¬∫ total de documentos en la colecci√≥n
        long int numTotalPal;// N¬∫ total de palabras en la colecci√≥n
        long int numTotalPalSinParada;// N¬∫ total de palabras sin stop-words en la colecci√≥n
        long int numTotalPalDiferentes;// N¬∫ total de palabras diferentes en la colecci√≥n que no sean stopwords     (sin acumular la frecuencia de cada una de ellas)
        long int tamBytes; // Tama√±o total en bytes de la colecci√≥n

};
/**************************************************************************************************/
/**************************************************************************************************/

class InfTermDoc
{

    friend ostream& operator<<(ostream& s, const InfTermDoc& p);
public:
    friend class Buscador;
    InfTermDoc (); // Inicializa ft = 0
    ~InfTermDoc (); // Pone ft = 0
    InfTermDoc & operator= (const InfTermDoc &);
    void add(const int &posicion);
    int getFt() const {return ft;}
    void toFile(ostream &) const;
    void fromFile(istream&);
    // A√±adir cuantos m√©todos se consideren necesarios para manejar la parte privada de la clase
private:
    int ft; // Frecuencia del t√©rmino en el documento
    list<int> posTerm;
    // Solo se almacenar√° esta informaci√≥n si el campo privado del indexador    almacenarPosTerm == true
    /** Lista de n√∫meros de palabra en los que aparece el t√©rmino en el
    documento. Los n√∫meros de palabra comenzar√°n desde cero (la primera
    palabra del documento). Se numerar√°n las palabras de parada. Estar√°
    ordenada de menor a mayor posici√≥n. */
};
/**************************************************************************************************/
/**************************************************************************************************/

class InfDoc {
    friend ostream& operator<<(ostream& s, const InfDoc& p);
public:
    friend class Buscador;
    friend class IndexadorHash;

    InfDoc ();
    InfDoc (const long int&);
    InfDoc (const InfDoc &);
    InfDoc & operator= (const InfDoc &);
    ~InfDoc ();

    long int getId() const {return idDoc;};
    long int getTotalPal() const{return numPal;};
    long int getTotalPalSinParada() const {return numPalSinParada;};
    long int getTotalPalDiferentes() const {return numPalDiferentes;};
    long int getBytes() const { return tamBytes;};
    string getFechaModificacion() const {return modificado;}

    void setId(const int &n){ idDoc = n;};
    void setNumPal(const int &n);
    void setNumPalDif(const int &n);
    void setNumPalSinParada(const int &n);
    void setTamBytes(const int &n);
    void setFechaModificacion(const string &g){modificado = g;}


    //void add(const bool &nueva,const bool& parada,const int& tam) ;
// A√±adir cuantos m√©todos se consideren necesarios para manejar la parte privada de la clase
private:

    long int idDoc;         // Identificador del documento. El primer documento indexado en la colecci√≥n ser√° el identificador 1
    int numPal;             // N¬∫ total de palabras del documento
    int numPalSinParada;    // N¬∫ total de palabras sin stop-words del documento
    int numPalDiferentes;   // N¬∫ total de palabras diferentes que no sean stop-words (sin acumular la frecuencia de cada una de ellas)
    int tamBytes;           // Tama√±o en bytes del documento Fecha fechaModificacion;
    string modificado;      // Atributo correspondiente a la fecha y hora de modificaci√≥n del documento. El tipo ‚ÄúFecha/hora‚Äù lo elegir√°/implementar√° el alumno

};

/**************************************************************************************************/
/**************************************************************************************************/

class InformacionPregunta {
    friend ostream& operator<<(ostream& s, const InformacionPregunta& p);
public:
    friend class Buscador;
    InformacionPregunta (const InformacionPregunta &);
    InformacionPregunta ();
    ~InformacionPregunta ();
    InformacionPregunta & operator= (const InformacionPregunta &);

    void setNumPal(const long int& n){ numTotalPal = n;}
    void setNumPalSinParada(const long int& n){ numTotalPalSinParada = n;}
    void setNumPalDiferentes(const long int& n){ numTotalPalDiferentes = n;}
    long int getNumPal() const {return numTotalPal;}
    long int getNumPalSinParada() const {return numTotalPalSinParada;}
    long int getNumPalDiferentes() const {return numTotalPalDiferentes;}


private:
    long int numTotalPal;
    // N¬∫ total de palabras en la pregunta
    long int numTotalPalSinParada;
    // N¬∫ total de palabras sin stop-words en la pregunta
    long int numTotalPalDiferentes;
    // N¬∫ total de palabras diferentes en la pregunta que no sean stop-words (sin acumular la frecuencia de cada una de ellas)
};

/**************************************************************************************************/
/**************************************************************************************************/

class InformacionTermino {

    friend ostream& operator<<(ostream& s, const InformacionTermino& p);

public:
    friend class Buscador;
    InformacionTermino (const InformacionTermino &);
    InformacionTermino (); // Inicializa ftc = 0
    ~InformacionTermino (); // Pone ftc = 0 y vac√≠a l_docs
    InformacionTermino & operator= (const InformacionTermino &);
    // A√±adir cuantos metodos se consideren necesarios para manejar la parte privada de la clase
    void add(const long int& idDoc, const int& posicion);
    void del(const long int& idDoc);
    void print() const;
    int getFrecuencia() const {return ftc;}
    bool IndexedAtDocument(const int& d, InfTermDoc& ) const;
    bool IndexedAtDocument(const int& d) const;
    void toFile(ostream &) const;
    void fromFile(istream &salida);


private:
    int ftc; // Frecuencia total del t√©rmino en la colecci√≥n
    unordered_map<long int, InfTermDoc> l_docs;
    /** Tabla Hash que se acceder√° por el id del documento, devolviendo un
    objeto de la clase InfTermDoc que contiene toda la informaci√≥n de
    aparici√≥n del t√©rmino en el documento */
};

/**************************************************************************************************/
/**************************************************************************************************/

class InformacionTerminoPregunta
{
    friend ostream& operator<<(ostream& s, const InformacionTerminoPregunta& p);

    public:

        friend class Buscador;

        InformacionTerminoPregunta (const InformacionTerminoPregunta &);
        InformacionTerminoPregunta ();
        ~InformacionTerminoPregunta ();
        InformacionTerminoPregunta & operator= (const InformacionTerminoPregunta&);
        void toFile(ostream &salida) const;
        void fromFile(istream &);

        //AÒade la ocurrencia de una palabra, pasando la posicion que ocupa
        void add(const int&);
       // int getF() const {return ft;};

    private:
        int ft; // Frecuencia total del t√©rmino en la pregunta

        list<int> posTerm;
        // Solo se almacenar√° esta informaci√≥n si el campo privado del indexador     almacenarPosTerm == true
        /** Lista de n√∫meros de palabra en los que aparece el t√©rmino en la
        pregunta. Los n√∫meros de palabra comenzar√°n desde cero (la primera
        palabra de la pregunta). Se numerar√°n las palabras de parada. Estar√°
        ordenada de menor a mayor posici√≥n.         */

};



#endif // INDEXADORINFORMACION_H
